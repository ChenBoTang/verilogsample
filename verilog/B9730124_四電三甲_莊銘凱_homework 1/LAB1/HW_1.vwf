/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0ms\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000000.0;
	SIMULATION_TIME = 1000000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("f_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("out[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("rst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("sel")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("sel[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "sel";
}

SIGNAL("sel[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "sel";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 10000;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
		}
	}
}

TRANSITION_LIST("f_out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1050.0;
		LEVEL 1 FOR 600.0;
		LEVEL 0 FOR 3000.0;
		LEVEL 1 FOR 3000.0;
		LEVEL 0 FOR 6400.0;
		LEVEL 1 FOR 6400.0;
		LEVEL 0 FOR 25800.0;
		LEVEL 1 FOR 25600.0;
		LEVEL 0 FOR 25600.0;
		LEVEL 1 FOR 25600.0;
		LEVEL 0 FOR 6400.0;
		LEVEL 1 FOR 25600.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 600.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 600.0;
				LEVEL 0 FOR 600.0;
				LEVEL 1 FOR 3000.0;
				LEVEL 0 FOR 25600.0;
			}
			LEVEL 1 FOR 600.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 600.0;
				LEVEL 1 FOR 600.0;
				LEVEL 0 FOR 3000.0;
				LEVEL 1 FOR 25600.0;
			}
		}
		LEVEL 0 FOR 600.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 3000.0;
			LEVEL 0 FOR 25600.0;
		}
		LEVEL 1 FOR 600.0;
		LEVEL 0 FOR 600.0;
		LEVEL 1 FOR 600.0;
		LEVEL 0 FOR 3000.0;
		LEVEL 1 FOR 25600.0;
		LEVEL 0 FOR 600.0;
		LEVEL 1 FOR 600.0;
		LEVEL 0 FOR 3000.0;
		LEVEL 1 FOR 350.0;
	}
}

TRANSITION_LIST("out[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 20300.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 12800.0;
			LEVEL 0 FOR 12800.0;
		}
		LEVEL 1 FOR 12800.0;
		LEVEL 0 FOR 19200.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 12800.0;
			LEVEL 0 FOR 17600.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 12800.0;
				LEVEL 0 FOR 17000.0;
			}
		}
		LEVEL 1 FOR 12800.0;
		LEVEL 0 FOR 17600.0;
		LEVEL 1 FOR 12800.0;
		LEVEL 0 FOR 17000.0;
		LEVEL 1 FOR 250.0;
	}
}

TRANSITION_LIST("out[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 7200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 6300.0;
		}
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 200.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 6400.0;
			LEVEL 0 FOR 6400.0;
		}
		LEVEL 1 FOR 6400.0;
		LEVEL 0 FOR 6300.0;
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 6400.0;
			LEVEL 1 FOR 6400.0;
		}
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 11200.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 6400.0;
				LEVEL 0 FOR 6400.0;
				LEVEL 1 FOR 6400.0;
				LEVEL 0 FOR 10600.0;
			}
			LEVEL 1 FOR 6400.0;
			LEVEL 0 FOR 6400.0;
			LEVEL 1 FOR 6400.0;
		}
		LEVEL 0 FOR 11200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 6400.0;
			LEVEL 0 FOR 6400.0;
			LEVEL 1 FOR 6400.0;
			LEVEL 0 FOR 10600.0;
		}
		LEVEL 1 FOR 6400.0;
		LEVEL 0 FOR 6400.0;
		LEVEL 1 FOR 6400.0;
		LEVEL 0 FOR 11200.0;
		LEVEL 1 FOR 6400.0;
		LEVEL 0 FOR 6400.0;
		LEVEL 1 FOR 6400.0;
		LEVEL 0 FOR 10600.0;
		LEVEL 1 FOR 250.0;
	}
}

TRANSITION_LIST("out[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 7300.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 3200.0;
		}
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 20;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 3200.0;
		}
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 8000.0;
			NODE
			{
				REPEAT = 2;
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 3200.0;
					LEVEL 0 FOR 3200.0;
				}
				LEVEL 1 FOR 3200.0;
				LEVEL 0 FOR 7400.0;
			}
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 3200.0;
				LEVEL 0 FOR 3200.0;
			}
		}
		LEVEL 1 FOR 3200.0;
		LEVEL 0 FOR 8000.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 3200.0;
				LEVEL 0 FOR 3200.0;
			}
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 7400.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 3200.0;
		}
		LEVEL 1 FOR 3200.0;
		LEVEL 0 FOR 8000.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 3200.0;
		}
		LEVEL 1 FOR 3200.0;
		LEVEL 0 FOR 7400.0;
		LEVEL 1 FOR 250.0;
	}
}

TRANSITION_LIST("out[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 1500.0;
		LEVEL 0 FOR 1500.0;
		LEVEL 1 FOR 1500.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
		}
		LEVEL 0 FOR 1600.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 41;
			LEVEL 1 FOR 1600.0;
			LEVEL 0 FOR 1600.0;
		}
		LEVEL 1 FOR 1600.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 3300.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1500.0;
				NODE
				{
					REPEAT = 8;
					LEVEL 0 FOR 1600.0;
					LEVEL 1 FOR 1600.0;
				}
				LEVEL 0 FOR 2700.0;
			}
			LEVEL 1 FOR 1500.0;
			NODE
			{
				REPEAT = 8;
				LEVEL 0 FOR 1600.0;
				LEVEL 1 FOR 1600.0;
			}
		}
		LEVEL 0 FOR 3300.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1500.0;
			NODE
			{
				REPEAT = 8;
				LEVEL 0 FOR 1600.0;
				LEVEL 1 FOR 1600.0;
			}
			LEVEL 0 FOR 2700.0;
		}
		LEVEL 1 FOR 1500.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
		}
		LEVEL 0 FOR 3300.0;
		LEVEL 1 FOR 1500.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
		}
		LEVEL 0 FOR 2700.0;
		LEVEL 1 FOR 1500.0;
		LEVEL 0 FOR 1600.0;
		LEVEL 1 FOR 250.0;
	}
}

TRANSITION_LIST("out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 700.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 700.0;
		LEVEL 1 FOR 700.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
		}
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 83;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
		}
		LEVEL 1 FOR 800.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 2500.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 700.0;
				NODE
				{
					REPEAT = 17;
					LEVEL 0 FOR 800.0;
					LEVEL 1 FOR 800.0;
				}
				LEVEL 0 FOR 1900.0;
			}
			LEVEL 1 FOR 700.0;
			NODE
			{
				REPEAT = 17;
				LEVEL 0 FOR 800.0;
				LEVEL 1 FOR 800.0;
			}
		}
		LEVEL 0 FOR 2500.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 700.0;
			NODE
			{
				REPEAT = 17;
				LEVEL 0 FOR 800.0;
				LEVEL 1 FOR 800.0;
			}
			LEVEL 0 FOR 1900.0;
		}
		LEVEL 1 FOR 700.0;
		NODE
		{
			REPEAT = 17;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
		}
		LEVEL 0 FOR 2500.0;
		LEVEL 1 FOR 700.0;
		NODE
		{
			REPEAT = 17;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
		}
		LEVEL 0 FOR 1900.0;
		LEVEL 1 FOR 700.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 250.0;
	}
}

TRANSITION_LIST("out[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 600.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 300.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
		}
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 300.0;
		NODE
		{
			REPEAT = 19;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
		}
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 167;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
		}
		LEVEL 1 FOR 400.0;
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 300.0;
				LEVEL 1 FOR 300.0;
			}
			NODE
			{
				REPEAT = 2;
				NODE
				{
					REPEAT = 35;
					LEVEL 0 FOR 400.0;
					LEVEL 1 FOR 400.0;
				}
				NODE
				{
					REPEAT = 3;
					LEVEL 0 FOR 300.0;
					LEVEL 1 FOR 300.0;
				}
			}
			NODE
			{
				REPEAT = 35;
				LEVEL 0 FOR 400.0;
				LEVEL 1 FOR 400.0;
			}
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 300.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 35;
				LEVEL 0 FOR 400.0;
				LEVEL 1 FOR 400.0;
			}
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 300.0;
				LEVEL 1 FOR 300.0;
			}
		}
		NODE
		{
			REPEAT = 35;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 300.0;
		}
		NODE
		{
			REPEAT = 35;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 300.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
		}
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 250.0;
	}
}

TRANSITION_LIST("out[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 39;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
		}
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 335;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 4;
				LEVEL 1 FOR 200.0;
				LEVEL 0 FOR 100.0;
				LEVEL 1 FOR 100.0;
				LEVEL 0 FOR 200.0;
			}
			NODE
			{
				REPEAT = 2;
				NODE
				{
					REPEAT = 70;
					LEVEL 1 FOR 200.0;
					LEVEL 0 FOR 200.0;
				}
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 200.0;
					LEVEL 0 FOR 100.0;
					LEVEL 1 FOR 100.0;
					LEVEL 0 FOR 200.0;
				}
			}
			NODE
			{
				REPEAT = 70;
				LEVEL 1 FOR 200.0;
				LEVEL 0 FOR 200.0;
			}
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 70;
				LEVEL 1 FOR 200.0;
				LEVEL 0 FOR 200.0;
			}
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 200.0;
				LEVEL 0 FOR 100.0;
				LEVEL 1 FOR 100.0;
				LEVEL 0 FOR 200.0;
			}
		}
		NODE
		{
			REPEAT = 70;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 70;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("out[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 4999;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
		}
		LEVEL 1 FOR 50.0;
	}
}

TRANSITION_LIST("rst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 350.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 1100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 5900.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 12900.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 979250.0;
	}
}

TRANSITION_LIST("sel[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1650.0;
		LEVEL 1 FOR 19000.0;
		LEVEL 0 FOR 80600.1;
		LEVEL 1 FOR 2500.0;
		LEVEL 0 FOR 2500.0;
		NODE
		{
			REPEAT = 178;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
		}
		LEVEL 1 FOR 2500.0;
		LEVEL 0 FOR 1249.9;
	}
}

TRANSITION_LIST("sel[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 450.0;
		LEVEL 1 FOR 1200.0;
		LEVEL 0 FOR 6000.0;
		LEVEL 1 FOR 13000.0;
		LEVEL 0 FOR 79350.1;
		LEVEL 1 FOR 1250.0;
		LEVEL 0 FOR 1250.0;
		NODE
		{
			REPEAT = 358;
			LEVEL 1 FOR 1250.0;
			LEVEL 0 FOR 1250.0;
		}
		LEVEL 1 FOR 1250.0;
		LEVEL 0 FOR 1249.9;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sel";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3;
}

DISPLAY_LINE
{
	CHANNEL = "sel[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "sel[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "rst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "f_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
	CHILDREN = 7, 8, 9, 10, 11, 12, 13, 14;
}

DISPLAY_LINE
{
	CHANNEL = "out[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "out[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 6;
}

TIME_BAR
{
	TIME = 21000000;
	MASTER = TRUE;
}
;
